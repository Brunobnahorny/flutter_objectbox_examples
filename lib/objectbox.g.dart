// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/models/pedido_model.dart';
import 'database/models/usuario_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3554543676760216544),
      name: 'Pedido',
      lastPropertyId: const IdUid(3, 8674354125352033766),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6185221581030925619),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 510080738510506603),
            name: 'productName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8674354125352033766),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1304548886940344708),
            relationTarget: 'Usuario')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3323843825132507276),
      name: 'Usuario',
      lastPropertyId: const IdUid(3, 8727870425441747517),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 564666341897437806),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8673899801466430143),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8727870425441747517),
            name: 'vip',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'pedido', srcEntity: 'Pedido', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 3323843825132507276),
      lastIndexId: const IdUid(1, 1304548886940344708),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Pedido: EntityDefinition<Pedido>(
        model: _entities[0],
        toOneRelations: (Pedido object) => [object.usuario],
        toManyRelations: (Pedido object) => {},
        getId: (Pedido object) => object.id,
        setId: (Pedido object, int id) {
          object.id = id;
        },
        objectToFB: (Pedido object, fb.Builder fbb) {
          final productNameOffset = fbb.writeString(object.productName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, productNameOffset);
          fbb.addInt64(2, object.usuario.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Pedido(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              productName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.usuario.attach(store);
          return object;
        }),
    Usuario: EntityDefinition<Usuario>(
        model: _entities[1],
        toOneRelations: (Usuario object) => [],
        toManyRelations: (Usuario object) => {
              RelInfo<Pedido>.toOneBacklink(
                      3, object.id, (Pedido srcObject) => srcObject.usuario):
                  object.pedido
            },
        getId: (Usuario object) => object.id,
        setId: (Usuario object, int id) {
          object.id = id;
        },
        objectToFB: (Usuario object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.vip);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Usuario(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              vip: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 8, false));
          InternalToManyAccess.setRelInfo<Usuario>(
              object.pedido,
              store,
              RelInfo<Pedido>.toOneBacklink(
                  3, object.id, (Pedido srcObject) => srcObject.usuario));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Pedido] entity fields to define ObjectBox queries.
class Pedido_ {
  /// see [Pedido.id]
  static final id = QueryIntegerProperty<Pedido>(_entities[0].properties[0]);

  /// see [Pedido.productName]
  static final productName =
      QueryStringProperty<Pedido>(_entities[0].properties[1]);

  /// see [Pedido.usuario]
  static final usuario =
      QueryRelationToOne<Pedido, Usuario>(_entities[0].properties[2]);
}

/// [Usuario] entity fields to define ObjectBox queries.
class Usuario_ {
  /// see [Usuario.id]
  static final id = QueryIntegerProperty<Usuario>(_entities[1].properties[0]);

  /// see [Usuario.name]
  static final name = QueryStringProperty<Usuario>(_entities[1].properties[1]);

  /// see [Usuario.vip]
  static final vip = QueryBooleanProperty<Usuario>(_entities[1].properties[2]);
}
